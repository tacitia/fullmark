(define v 3)
(< (+ (+ 1 4) (+ 2 3) (+ 3 1.2) (+ 4 1.5 1.7) (+ 5 6 7 8 9) ))
(< (+ (+ (- (- 1 2) (* 1 2)) (* 1 2)) (/ 1 2)))
(< (+ (if 1.1 1 2.2) (car (quote (2 3 4)))) (- 1 (if (quote 2) 3) ((quote if) 4 5)) )
(< (- 1.1 2.2 (* 2.2 3.3) (quote 3.3)) (- 1 2.0 3 (+ 2 3) (nullp (quote ()))) (- (floor 1.1) (if ((quote ceiling) -0.1) (+ 3.14 2.17) (if 6 4))))
(not (* (+) (- 1) (*) (/ 3.0)))
(not (* ((quote floor)(+ 1 1.2)) 2))
(not (quote (not (* ((quote floor)(+ 1 1.2)) 2))))
(< (not (not 1)) 0.5)
(/ (if (not (quote ())) 1.1 2.2))
(ceiling (if (< 5 3.2) 3.4 5.6))
(< v (not v))
(eval (car (quote (v))))
(eval (eval (eval (eval (eval v)))))
(ceiling (eval (quote (/ 1.5 v))))
(define a (quote ((if (not v) (quote +) (quote -)) v 1.5)))
a
(< v (eval a))
(if (eval (eval a)) (define b (+ (eval a) (eval v))) (define b (- (eval a) (eval v))))
b
(define c (car (cdr (cdr a))))
c
(* (* v b c) (/ 100.0 v b c))
(define d (quote (quote (quote (quote (* v b c))))))
(eval (car (cdr (eval (eval (eval d))))))
(print (define e (cons (quote v) (quote ()))))
(print (car e))
(print (print (print v)))