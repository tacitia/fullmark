(define > (lambda (x y) (< y x)))
(define >= (lambda (x y) (not (< x y))))
(define <= (lambda (x y) (not (< y x))))
(define = (lambda (x y) (if (< x y) 0 (not (< y x)))))
(define abs (lambda (x) (if (< x 0) (- 0 x) x)))
(define factorial (lambda (x) (if (< x 2) 1 (* x (factorial (- x 1))))))
(define for-each (lambda (f a) (if (not (nullp a)) (f (eval(car a)))) (if (not (nullp a)) (for-each f (cdr a)) (quote ()))))
(define list-tail (lambda (list k) (if (< k 0) (quote error) (if (= k 0) list (if (nullp list) (quote error) (list-tail (cdr list) (- k 1)))))))
(define list-ref (lambda (list k) (if (< k 0) (quote error) (if (= k 0) (if (nullp list) (quote error) (car list)) (if (nullp list) (quote error) (list-ref (cdr list) (- k 1)))))))
(define reverse (lambda (list) (define get-last (lambda (_list) (if (nullp _list) (quote ()) (if (nullp (cdr _list)) (car _list) (get-last (cdr _list)))))) (define remove-last (lambda (_list) (if (nullp _list) (quote ()) (if (nullp (cdr _list)) (quote ()) (cons (car _list) (remove-last (cdr _list))))))) (if (nullp list) (quote ()) (cons (get-last list) (reverse (remove-last list))))))
(define equal? (lambda (obj1 obj2) (if (nullp obj1) (if (nullp obj2) 1 0) (if (nullp obj2) 0 (if (listp obj1) (if (listp obj2) (if (equal? (car obj1) (car obj2)) (if (equal? (cdr obj1) (cdr obj2)) 1 0) 0) 0) (if (listp obj2) 0 (if (= obj1 obj2) 1 0)))))))
(define assoc (lambda (obj alist) (if (nullp alist) 0 (if (nullp (car alist)) (quote error) (if (equal? obj (car (car alist))) (car alist) (assoc obj (cdr alist)))))))
(define list-partition (lambda (proc list_p) (define true-list (lambda (list_p_t) (if (nullp list_p_t) (quote ()) (if (proc (car list_p_t)) (cons (car list_p_t) (true-list (cdr list_p_t))) (true-list (cdr list_p_t)))))) (define false-list (lambda (list_p_f) (if (nullp list_p_f) (quote ()) (if (proc (car list_p_f)) (false-list (cdr list_p_f)) (cons (car list_p_f) (false-list (cdr list_p_f))))))) (cons (true-list list_p) (cons (false-list list_p) (quote ())))))
(define list-sort (lambda (proc_s list_s) (define combine (lambda (list1 list2) (if (nullp list1) list2 (cons (car list1) (combine (cdr list1) list2))))) (if (nullp list_s) (quote ()) (define _proc (lambda (x) (if (proc_s x (car list_s)) 1 0)))) (if (nullp list_s) (quote ()) (combine (combine (list-sort proc_s (car (list-partition _proc (cdr list_s)))) (cons (car list_s) (quote ()))) (list-sort proc_s (car (cdr (list-partition _proc (cdr list_s)))))))))
